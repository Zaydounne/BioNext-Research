#!/bin/bash

# Script d'installation automatis√©e BioNext Research Portal
# ZERO DEPENDANCE - Installation compl√®te depuis une Ubuntu fra√Æche
# Usage: curl -fsSL https://raw.githubusercontent.com/VOTRE-USERNAME/bionext-research-portal/main/setup-bionext.sh | bash

set -e

echo "üß™ Installation COMPL√àTE de BioNext Research Portal"
echo "=================================================="
echo "‚ö° Installation depuis z√©ro - Aucune d√©pendance requise"
echo

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[√âTAPE]${NC} $1"
}

# V√©rification syst√®me et pr√©requis
check_system() {
    log_step "1/10 - V√©rification du syst√®me..."
    
    # V√©rifier si on est root ou si sudo est disponible
    if [[ $EUID -eq 0 ]]; then
        SUDO=""
        log_warning "Ex√©cution en tant que root"
    else
        if ! command -v sudo &> /dev/null; then
            log_error "sudo n'est pas install√©. Installez sudo ou ex√©cutez en tant que root."
            exit 1
        fi
        SUDO="sudo"
    fi
    
    # V√©rifier la distribution
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        log_info "Syst√®me d√©tect√©: $NAME $VERSION"
        
        if [[ "$ID" != "ubuntu" ]]; then
            log_warning "Ce script est optimis√© pour Ubuntu, mais va continuer..."
        fi
    else
        log_warning "Distribution non identifi√©e, continuation..."
    fi
    
    # V√©rifier l'espace disque (minimum 2GB)
    AVAILABLE_SPACE=$(df / | awk 'NR==2 {print $4}')
    if [ "$AVAILABLE_SPACE" -lt 2097152 ]; then
        log_warning "Espace disque faible (< 2GB disponible)"
    fi
    
    log_success "V√©rification syst√®me termin√©e"
}

# Mise √† jour compl√®te du syst√®me
update_system() {
    log_step "2/10 - Mise √† jour compl√®te du syst√®me..."
    
    # Mise √† jour de la liste des paquets
    log_info "Mise √† jour de la liste des paquets..."
    $SUDO apt update -qq
    
    # Installation des outils de base essentiels
    log_info "Installation des outils de base..."
    $SUDO apt install -y \
        curl \
        wget \
        gnupg \
        lsb-release \
        ca-certificates \
        apt-transport-https \
        software-properties-common \
        build-essential \
        unzip \
        tar \
        gzip
    
    log_success "Syst√®me mis √† jour et outils de base install√©s"
}

# Installation de Git
install_git() {
    log_step "3/10 - Installation de Git..."
    
    if command -v git &> /dev/null; then
        GIT_VERSION=$(git --version)
        log_success "Git d√©j√† install√©: $GIT_VERSION"
        return
    fi
    
    log_info "Installation de Git depuis les d√©p√¥ts officiels..."
    $SUDO apt install -y git
    
    # V√©rification de l'installation
    if command -v git &> /dev/null; then
        GIT_VERSION=$(git --version)
        log_success "Git install√©: $GIT_VERSION"
    else
        log_error "√âchec de l'installation de Git"
        exit 1
    fi
}

# Installation de Node.js (m√©thode robuste)
install_nodejs() {
    log_step "4/10 - Installation de Node.js..."
    
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        NPM_VERSION=$(npm --version)
        log_success "Node.js d√©j√† install√©: $NODE_VERSION (npm: $NPM_VERSION)"
        
        # V√©rifier la version (minimum Node 16)
        NODE_MAJOR=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')
        if [ "$NODE_MAJOR" -lt 16 ]; then
            log_warning "Version de Node.js trop ancienne ($NODE_VERSION), mise √† jour..."
        else
            return
        fi
    fi
    
    log_info "Installation de Node.js LTS via NodeSource..."
    
    # Nettoyage des anciennes installations
    $SUDO apt remove -y nodejs npm 2>/dev/null || true
    
    # Installation du repository NodeSource
    curl -fsSL https://deb.nodesource.com/setup_lts.x | $SUDO -E bash -
    
    # Installation de Node.js
    $SUDO apt install -y nodejs
    
    # V√©rification de l'installation
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        NODE_VERSION=$(node --version)
        NPM_VERSION=$(npm --version)
        log_success "Node.js install√©: $NODE_VERSION"
        log_success "npm install√©: $NPM_VERSION"
        
        # Configuration npm pour √©viter les probl√®mes de permissions
        npm config set fund false
        npm config set audit false
        
    else
        log_error "√âchec de l'installation de Node.js"
        log_info "Tentative d'installation alternative..."
        
        # M√©thode alternative via snap
        if command -v snap &> /dev/null; then
            $SUDO snap install node --classic
            if command -v node &> /dev/null; then
                log_success "Node.js install√© via snap"
            else
                log_error "Toutes les m√©thodes d'installation ont √©chou√©"
                exit 1
            fi
        else
            log_error "Impossible d'installer Node.js"
            exit 1
        fi
    fi
}

# Clonage du projet avec gestion d'erreurs
clone_project() {
    log_step "5/10 - Clonage du projet..."
    
    PROJECT_DIR="bionext-research-portal"
    
    # Gestion du dossier existant
    if [ -d "$PROJECT_DIR" ]; then
        log_warning "Le dossier $PROJECT_DIR existe d√©j√†"
        
        # Mode non-interactif : sauvegarde et reclonage
        BACKUP_DIR="${PROJECT_DIR}_backup_$(date +%Y%m%d_%H%M%S)"
        mv "$PROJECT_DIR" "$BACKUP_DIR"
        log_info "Ancien dossier sauvegard√© dans $BACKUP_DIR"
    fi
    
    # URLs de repository possibles (√† adapter)
    REPO_URLS=(
        "https://github.com/VOTRE-USERNAME/bionext-research-portal.git"
        "https://github.com/votre-username/bionext-research-portal.git"
    )
    
    CLONE_SUCCESS=false
    
    for REPO_URL in "${REPO_URLS[@]}"; do
        log_info "Tentative de clonage depuis: $REPO_URL"
        
        if git clone "$REPO_URL" "$PROJECT_DIR" 2>/dev/null; then
            log_success "Projet clon√© avec succ√®s depuis $REPO_URL"
            CLONE_SUCCESS=true
            break
        else
            log_warning "√âchec du clonage depuis $REPO_URL"
        fi
    done
    
    if [ "$CLONE_SUCCESS" = false ]; then
        log_error "Impossible de cloner le projet depuis les URLs configur√©es"
        log_info "Cr√©ation d'un projet de base..."
        
        # Cr√©ation d'un projet minimal si le clonage √©choue
        create_minimal_project
    fi
    
    cd "$PROJECT_DIR"
    log_success "Positionnement dans le dossier du projet"
}

# Cr√©ation d'un projet minimal en cas d'√©chec de clonage
create_minimal_project() {
    log_info "Cr√©ation d'un projet BioNext minimal..."
    
    mkdir -p "$PROJECT_DIR"
    cd "$PROJECT_DIR"
    
    # Cr√©ation du package.json minimal
    cat > package.json <<'EOF'
{
  "name": "bionext-research-portal",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.0.0",
    "typescript": "^5.0.0",
    "vite": "^4.4.0"
  }
}
EOF

    # Cr√©ation de la structure minimale
    mkdir -p src public
    
    # Index HTML minimal
    cat > index.html <<'EOF'
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BioNext Research Portal</title>
</head>
<body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
</body>
</html>
EOF

    # App React minimal
    cat > src/App.tsx <<'EOF'
import React from 'react';

function App() {
  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <h1>üß™ BioNext Research Portal</h1>
      <p>Installation r√©ussie ! Le projet complet sera synchronis√© lors de la prochaine mise √† jour.</p>
      <p>Pour obtenir la version compl√®te, configurez votre repository Git et relancez le script.</p>
    </div>
  );
}

export default App;
EOF

    # Main.tsx
    cat > src/main.tsx <<'EOF'
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);
EOF

    # Vite config
    cat > vite.config.ts <<'EOF'
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    host: '0.0.0.0',
    port: 5173
  }
});
EOF

    log_success "Projet minimal cr√©√©"
}

# Installation des d√©pendances avec gestion d'erreurs
install_dependencies() {
    log_step "6/10 - Installation des d√©pendances..."
    
    # V√©rification du package.json
    if [ ! -f "package.json" ]; then
        log_error "package.json introuvable"
        exit 1
    fi
    
    log_info "Nettoyage du cache npm..."
    npm cache clean --force 2>/dev/null || true
    
    # Suppression du node_modules existant
    if [ -d "node_modules" ]; then
        log_info "Suppression de l'ancien node_modules..."
        rm -rf node_modules
    fi
    
    # Suppression du package-lock.json pour √©viter les conflits
    if [ -f "package-lock.json" ]; then
        rm -f package-lock.json
    fi
    
    log_info "Installation des d√©pendances (cela peut prendre quelques minutes)..."
    
    # Installation avec retry en cas d'√©chec
    INSTALL_ATTEMPTS=0
    MAX_ATTEMPTS=3
    
    while [ $INSTALL_ATTEMPTS -lt $MAX_ATTEMPTS ]; do
        if npm install; then
            log_success "D√©pendances install√©es avec succ√®s"
            break
        else
            INSTALL_ATTEMPTS=$((INSTALL_ATTEMPTS + 1))
            log_warning "Tentative $INSTALL_ATTEMPTS/$MAX_ATTEMPTS √©chou√©e"
            
            if [ $INSTALL_ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                log_info "Nouvelle tentative dans 5 secondes..."
                sleep 5
                npm cache clean --force 2>/dev/null || true
            else
                log_error "√âchec de l'installation des d√©pendances apr√®s $MAX_ATTEMPTS tentatives"
                exit 1
            fi
        fi
    done
}

# Configuration du firewall
configure_firewall() {
    log_step "7/10 - Configuration du firewall..."
    
    if command -v ufw &> /dev/null; then
        log_info "Configuration d'UFW pour le port 5173..."
        $SUDO ufw allow 5173/tcp 2>/dev/null || true
        log_success "Port 5173 autoris√© dans UFW"
    elif command -v iptables &> /dev/null; then
        log_info "Configuration d'iptables pour le port 5173..."
        $SUDO iptables -A INPUT -p tcp --dport 5173 -j ACCEPT 2>/dev/null || true
        log_success "Port 5173 autoris√© dans iptables"
    else
        log_warning "Aucun firewall d√©tect√©, configuration ignor√©e"
    fi
}

# Cr√©ation du service systemd
create_service() {
    log_step "8/10 - Cr√©ation du service systemd..."
    
    SERVICE_FILE="/etc/systemd/system/bionext-portal.service"
    CURRENT_USER=$(whoami)
    CURRENT_DIR=$(pwd)
    NODE_PATH=$(which node)
    NPM_PATH=$(which npm)
    
    log_info "Cr√©ation du service systemd..."
    
    $SUDO tee "$SERVICE_FILE" > /dev/null <<EOF
[Unit]
Description=BioNext Research Portal
Documentation=https://github.com/VOTRE-USERNAME/bionext-research-portal
After=network.target
Wants=network.target

[Service]
Type=simple
User=$CURRENT_USER
Group=$CURRENT_USER
WorkingDirectory=$CURRENT_DIR
Environment=NODE_ENV=production
Environment=PATH=/usr/local/bin:/usr/bin:/bin:$HOME/.local/bin
ExecStart=$NPM_PATH run dev -- --host 0.0.0.0 --port 5173
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=bionext-portal

# S√©curit√©
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$CURRENT_DIR

[Install]
WantedBy=multi-user.target
EOF

    # Rechargement et activation du service
    $SUDO systemctl daemon-reload
    $SUDO systemctl enable bionext-portal
    
    log_success "Service systemd cr√©√© et activ√©"
}

# Cr√©ation des scripts utiles
create_utility_scripts() {
    log_step "9/10 - Cr√©ation des scripts utiles..."
    
    # Script de d√©marrage rapide
    cat > start-bionext.sh <<'EOF'
#!/bin/bash
echo "üöÄ D√©marrage de BioNext Research Portal..."
cd "$(dirname "$0")"

# V√©rification des d√©pendances
if [ ! -d "node_modules" ]; then
    echo "üì¶ Installation des d√©pendances..."
    npm install
fi

# D√©marrage de l'application
echo "üåê Lancement sur http://localhost:5173"
npm run dev -- --host 0.0.0.0 --port 5173
EOF
    chmod +x start-bionext.sh
    
    # Script de mise √† jour
    cat > update-bionext.sh <<'EOF'
#!/bin/bash
echo "üîÑ Mise √† jour de BioNext Research Portal..."
cd "$(dirname "$0")"

# Sauvegarde des modifications locales
if [ -d ".git" ]; then
    echo "üíæ Sauvegarde des modifications locales..."
    git stash push -m "Auto-stash before update $(date)"
    
    echo "üì• R√©cup√©ration des derni√®res modifications..."
    git pull origin main
    
    echo "üì¶ Mise √† jour des d√©pendances..."
    npm install
    
    echo "üîÑ Red√©marrage du service..."
    sudo systemctl restart bionext-portal 2>/dev/null || echo "Service non d√©marr√©"
    
    echo "‚úÖ Mise √† jour termin√©e"
else
    echo "‚ùå Pas de repository Git configur√©"
    echo "Pour configurer Git:"
    echo "  git init"
    echo "  git remote add origin https://github.com/VOTRE-USERNAME/bionext-research-portal.git"
fi
EOF
    chmod +x update-bionext.sh
    
    # Script de sauvegarde
    cat > backup-bionext.sh <<'EOF'
#!/bin/bash
echo "üíæ Sauvegarde de BioNext Research Portal..."
cd "$(dirname "$0")"

BACKUP_DIR="../bionext-backups"
mkdir -p "$BACKUP_DIR"

BACKUP_NAME="bionext-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"

echo "üì¶ Cr√©ation de l'archive..."
tar -czf "$BACKUP_PATH" . \
    --exclude=node_modules \
    --exclude=dist \
    --exclude=.git \
    --exclude="*.log" \
    --exclude=".npm"

if [ -f "$BACKUP_PATH" ]; then
    BACKUP_SIZE=$(du -h "$BACKUP_PATH" | cut -f1)
    echo "‚úÖ Sauvegarde cr√©√©e: $BACKUP_PATH ($BACKUP_SIZE)"
    
    # Nettoyage des anciennes sauvegardes (garde les 5 derni√®res)
    cd "$BACKUP_DIR"
    ls -t bionext-backup-*.tar.gz | tail -n +6 | xargs rm -f 2>/dev/null || true
    echo "üßπ Anciennes sauvegardes nettoy√©es"
else
    echo "‚ùå Erreur lors de la cr√©ation de la sauvegarde"
fi
EOF
    chmod +x backup-bionext.sh
    
    # Script de diagnostic
    cat > diagnose-bionext.sh <<'EOF'
#!/bin/bash
echo "üîç Diagnostic BioNext Research Portal"
echo "===================================="

cd "$(dirname "$0")"

echo "üìç R√©pertoire: $(pwd)"
echo "üë§ Utilisateur: $(whoami)"
echo

echo "üîß Versions install√©es:"
echo "  Node.js: $(node --version 2>/dev/null || echo 'Non install√©')"
echo "  npm: $(npm --version 2>/dev/null || echo 'Non install√©')"
echo "  Git: $(git --version 2>/dev/null || echo 'Non install√©')"
echo

echo "üì¶ √âtat du projet:"
echo "  package.json: $([ -f package.json ] && echo '‚úÖ Pr√©sent' || echo '‚ùå Manquant')"
echo "  node_modules: $([ -d node_modules ] && echo '‚úÖ Pr√©sent' || echo '‚ùå Manquant')"
echo "  Repository Git: $([ -d .git ] && echo '‚úÖ Configur√©' || echo '‚ùå Non configur√©')"
echo

echo "üåê Test de connectivit√©:"
if curl -s http://localhost:5173 > /dev/null; then
    echo "  Application: ‚úÖ Accessible sur http://localhost:5173"
else
    echo "  Application: ‚ùå Non accessible"
fi

echo
echo "üîß Service systemd:"
if systemctl is-active --quiet bionext-portal; then
    echo "  Statut: ‚úÖ Actif"
else
    echo "  Statut: ‚ùå Inactif"
fi

echo
echo "üìä Utilisation des ressources:"
echo "  CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
echo "  RAM: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
echo "  Disque: $(df -h . | awk 'NR==2 {print $3 "/" $2 " (" $5 " utilis√©)"}')"
EOF
    chmod +x diagnose-bionext.sh
    
    log_success "Scripts utiles cr√©√©s (start, update, backup, diagnose)"
}

# D√©marrage de l'application
start_application() {
    log_step "10/10 - D√©marrage de l'application..."
    
    # Test de build pour v√©rifier que tout fonctionne
    log_info "Test de build de l'application..."
    if npm run build; then
        log_success "Build r√©ussi"
    else
        log_warning "√âchec du build, mais continuation du d√©marrage..."
    fi
    
    # D√©marrage via systemd
    log_info "D√©marrage du service systemd..."
    if $SUDO systemctl start bionext-portal; then
        sleep 5
        
        if $SUDO systemctl is-active --quiet bionext-portal; then
            log_success "Service d√©marr√© avec succ√®s"
        else
            log_warning "Service d√©marr√© mais statut incertain"
        fi
    else
        log_warning "√âchec du d√©marrage via systemd, d√©marrage manuel..."
        
        # D√©marrage manuel en arri√®re-plan
        nohup npm run dev -- --host 0.0.0.0 --port 5173 > bionext.log 2>&1 &
        sleep 5
        log_info "Application d√©marr√©e manuellement"
    fi
    
    # V√©rification que l'application r√©pond
    log_info "V√©rification de l'accessibilit√©..."
    
    WAIT_TIME=0
    MAX_WAIT=30
    
    while [ $WAIT_TIME -lt $MAX_WAIT ]; do
        if curl -s http://localhost:5173 > /dev/null 2>&1; then
            log_success "‚úÖ Application accessible sur http://localhost:5173"
            break
        else
            sleep 2
            WAIT_TIME=$((WAIT_TIME + 2))
            echo -n "."
        fi
    done
    
    if [ $WAIT_TIME -ge $MAX_WAIT ]; then
        log_warning "Application non accessible apr√®s ${MAX_WAIT}s"
        log_info "V√©rifiez les logs avec: sudo journalctl -u bionext-portal -f"
    fi
}

# Affichage des informations finales
show_final_info() {
    echo
    echo "üéâ Installation COMPL√àTE termin√©e avec succ√®s !"
    echo "=============================================="
    echo
    
    # Informations syst√®me
    echo "üíª Informations syst√®me:"
    echo "   OS: $(lsb_release -d 2>/dev/null | cut -f2 || echo 'Linux')"
    echo "   Node.js: $(node --version)"
    echo "   npm: $(npm --version)"
    echo "   Git: $(git --version | cut -d' ' -f3)"
    echo
    
    # Emplacements
    echo "üìç Emplacements:"
    echo "   Projet: $(pwd)"
    echo "   Service: /etc/systemd/system/bionext-portal.service"
    echo "   Logs: sudo journalctl -u bionext-portal -f"
    echo
    
    # URLs d'acc√®s
    echo "üåê Acc√®s √† l'application:"
    echo "   Local: http://localhost:5173"
    
    # IP publique si disponible
    PUBLIC_IP=$(curl -s --max-time 5 ifconfig.me 2>/dev/null || curl -s --max-time 5 icanhazip.com 2>/dev/null || echo "")
    if [ -n "$PUBLIC_IP" ]; then
        echo "   Public: http://$PUBLIC_IP:5173"
    fi
    
    # IP locale
    LOCAL_IP=$(hostname -I | awk '{print $1}' 2>/dev/null || echo "")
    if [ -n "$LOCAL_IP" ] && [ "$LOCAL_IP" != "127.0.0.1" ]; then
        echo "   R√©seau local: http://$LOCAL_IP:5173"
    fi
    
    echo
    
    # Commandes utiles
    echo "üõ†Ô∏è  Scripts disponibles:"
    echo "   ./start-bionext.sh        - D√©marrer l'application"
    echo "   ./update-bionext.sh       - Mettre √† jour depuis Git"
    echo "   ./backup-bionext.sh       - Cr√©er une sauvegarde"
    echo "   ./diagnose-bionext.sh     - Diagnostic complet"
    echo
    
    # Gestion du service
    echo "üîß Gestion du service systemd:"
    echo "   sudo systemctl start bionext-portal     - D√©marrer"
    echo "   sudo systemctl stop bionext-portal      - Arr√™ter"
    echo "   sudo systemctl restart bionext-portal   - Red√©marrer"
    echo "   sudo systemctl status bionext-portal    - Statut d√©taill√©"
    echo "   sudo systemctl enable bionext-portal    - D√©marrage automatique"
    echo "   sudo systemctl disable bionext-portal   - D√©sactiver d√©marrage auto"
    echo
    
    # Logs et debugging
    echo "üìã Logs et debugging:"
    echo "   sudo journalctl -u bionext-portal -f    - Logs en temps r√©el"
    echo "   sudo journalctl -u bionext-portal -n 50 - 50 derni√®res lignes"
    echo "   tail -f bionext.log                     - Logs application"
    echo "   ./diagnose-bionext.sh                   - Diagnostic complet"
    echo
    
    # Prochaines √©tapes
    echo "üöÄ Prochaines √©tapes:"
    echo "   1. Configurez votre repository Git si n√©cessaire"
    echo "   2. Personnalisez l'application selon vos besoins"
    echo "   3. Utilisez ./update-bionext.sh pour les mises √† jour"
    echo "   4. Cr√©ez des sauvegardes r√©guli√®res avec ./backup-bionext.sh"
    echo
    
    # Test final
    echo "üß™ Test final:"
    if curl -s http://localhost:5173 > /dev/null 2>&1; then
        echo "   ‚úÖ Application op√©rationnelle et accessible"
    else
        echo "   ‚ö†Ô∏è  Application install√©e mais non accessible"
        echo "   Utilisez ./diagnose-bionext.sh pour plus d'informations"
    fi
    
    echo
    echo "üìû Support:"
    echo "   En cas de probl√®me, consultez les logs ou relancez le script"
    echo "   Repository: https://github.com/VOTRE-USERNAME/bionext-research-portal"
    echo
}

# Gestion des erreurs et nettoyage
cleanup_on_error() {
    log_error "Installation interrompue √† l'√©tape: $1"
    log_info "Nettoyage en cours..."
    
    # Arr√™t du service si cr√©√©
    $SUDO systemctl stop bionext-portal 2>/dev/null || true
    
    # Nettoyage des processus npm
    pkill -f "npm run dev" 2>/dev/null || true
    
    echo "Pour relancer l'installation, ex√©cutez √† nouveau le script."
    exit 1
}

# Fonction principale
main() {
    echo "üöÄ D√©but de l'installation automatis√©e..."
    echo "Temps estim√©: 5-10 minutes selon votre connexion"
    echo
    
    # Gestion des interruptions
    trap 'cleanup_on_error "Interruption utilisateur"' INT TERM
    
    # Ex√©cution des √©tapes
    check_system
    update_system
    install_git
    install_nodejs
    clone_project
    install_dependencies
    configure_firewall
    create_service
    create_utility_scripts
    start_application
    show_final_info
    
    echo "üéØ Installation termin√©e avec succ√®s !"
    echo "Votre portail BioNext Research est maintenant op√©rationnel."
}

# Point d'entr√©e
main "$@"